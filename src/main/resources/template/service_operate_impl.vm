package ${packageName}.service.core.service.impl;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.oneplus.common.exception.BusinessException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ${packageName}.dao.po.${upClassName}PO;
import ${packageName}.dao.${upClassName}DAO;
import ${packageName}.service.core.service.${upClassName}Service;
import ${packageName}.service.exception.${upClassName}ErrorCode;
import ${packageName}.service.util.ListFieldConvertUtils;
import ${packageName}.service.util.QueryMapperUtils;
import ${packageName}.service.util.page.Paging;
import ${packageName}.service.util.page.PagingRequest;
import ${packageName}.service.util.page.DefaultPaging;
import ${packageName}.service.util.page.ListAdapterUtil;
import ${packageName}.service.util.page.adapter.ListAdapter;

import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.collections4.CollectionUtils;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

${classTitle}
@Service("${lowClassName}Service")
public class ${upClassName}ServiceImpl implements ${upClassName}Service {

	/** sl4j */
	private static final Logger LOGGER = LoggerFactory.getLogger(${upClassName}ServiceImpl.class);

	@Autowired
	private ${upClassName}DAO ${lowClassName}DAO;

	@Override
	public void add${upClassName}(${upClassName}PO ${lowClassName}PO) {
		validAdd${upClassName}(${lowClassName}PO);

		${lowClassName}DAO.add${upClassName}(${lowClassName}PO);
		LOGGER.info("增加${upClassName}成功, ${lowClassName}PO={}", ${lowClassName}PO);
	}

	@Override
	public void update${upClassName}(${upClassName}PO ${lowClassName}PO) {
		validUpdate${upClassName}(${lowClassName}PO);

		${lowClassName}DAO.update${upClassName}(${lowClassName}PO);
		LOGGER.info("更新${upClassName}成功, ${lowClassName}PO={}", ${lowClassName}PO);
	}

	@Override
    public ${upClassName}PO find${upClassName}By${primaryKeyFirstSymbolUppercase}(${primaryKeyType} ${primaryKey}) {
#if(${primaryKeyType} == "String")
		if (StringUtils.isBlank(${primaryKey})) {
        	return null;
        }
#else
        if (${primaryKey} == null) {
        	return null;
        }
		#end

        ${upClassName}PO ${lowClassName}PO = ${lowClassName}DAO.findBy${primaryKeyFirstSymbolUppercase}(${primaryKey});
        return ${lowClassName}PO;
	}

	@Override
	public List<${upClassName}PO> list${upClassName}(${primaryKeyType}[] ${primaryKey}s) {
		if (ArrayUtils.isEmpty(${primaryKey}s)) {
			return Lists.newArrayList();
		}

		Map<String, Object> map = QueryMapperUtils.toQueryMap();
		map.put("${primaryKey}s", ${primaryKey}s);
		List<${upClassName}PO> ${lowClassName}POs = ${lowClassName}DAO.list${upClassName}(map);
        return ${lowClassName}POs;
	}

	@Override
	public Map<${primaryKeyType}, ${upClassName}PO> map${upClassName}(${primaryKeyType}[] ${primaryKey}s) {
		List<${upClassName}PO> ${lowClassName}POs = list${upClassName}(${primaryKey}s);
		if (CollectionUtils.isEmpty(${lowClassName}POs)) {
			return Maps.newHashMap();
		}

		Map<${primaryKeyType}, ${upClassName}PO> ${lowClassName}Map = ListFieldConvertUtils
			.getObjectMap(${lowClassName}POs, "${primaryKey}");
		return ${lowClassName}Map;
	}

	@Override
	public Paging<${upClassName}PO> find${upClassName}ByPage(${upClassName}PO ${lowClassName}PO, PagingRequest pagingRequest) {
		// 查询请求参数转换
        ListAdapter<${upClassName}PO> listAdapter = ListAdapterUtil.<${upClassName}PO>convert2ListAdapter(pagingRequest);
        Map<String, Object> queryMap = listAdapter.convert(${lowClassName}PO);

        // 分页查询数量
        Integer count = ${lowClassName}DAO.list${upClassName}Count(queryMap);

        DefaultPaging<${upClassName}PO> paging = new DefaultPaging<${upClassName}PO>
                (pagingRequest.getPageNo(), pagingRequest.getPageSize(), count);
        if (count <= 0) {
            paging.setResult(new ArrayList<${upClassName}PO>(0));
            return paging;
        }

    	listAdapter.setPageNo(paging.getCurrentPageNo());
    	queryMap.putAll(listAdapter.convert(null));

		List<${upClassName}PO> ${lowClassName}POs = ${lowClassName}DAO.list${upClassName}(queryMap);
        if (CollectionUtils.isEmpty(${lowClassName}POs)) {
            paging.setResult(new ArrayList<${upClassName}PO>(0));
            return paging;
        }

        paging.setResult(${lowClassName}POs);
        return paging;
	}

    /**
     * 校验增加${upClassName}PO参数
     *
     * @param ${lowClassName}PO
     */
    private void validAdd${upClassName}(${upClassName}PO ${lowClassName}PO) {
#foreach($util in $addUtils)
    ${util}
#end
    }

    /**
     * 校验修改${upClassName}PO参数
     *
     * @param ${lowClassName}PO
     */
    private void validUpdate${upClassName}(${upClassName}PO ${lowClassName}PO) {
#foreach($util in $uptUtils)
    ${util}
#end
    }
}