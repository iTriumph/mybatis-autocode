package ${packageName}.service.impl;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import ${packageName}.common.lang.CollectionUtil;
import ${packageName}.common.lang.ListFieldConvertUtils;
import ${packageName}.common.lang.QueryMapperUtils;
import ${packageName}.common.page.*;
import ${packageName}.common.page.adapter.ListAdapter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ${packageName}.service.domain.${upClassName};
import ${packageName}.dao.${upClassName}Mapper;
import ${packageName}.dao.model.${upClassName};
import ${packageName}.vo.${upClassName}VO;
import ${packageName}.common.page.Paging;
import ${packageName}.common.page.PagingRequest;
import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

${classTitle}
@Service("${lowClassName}QueryService")
public class ${upClassName}QueryServiceImpl implements ${upClassName}QueryService {

	/** sl4j */
	private static final Logger LOGGER = LoggerFactory.getLogger(${upClassName}QueryServiceImpl.class);

	@Autowired
	private ${upClassName}Mapper ${lowClassName}Mapper;

	@Override
    public ${upClassName} find${upClassName}By${primaryKeyFirstSymbolUppercase}(${primaryKeyType} ${primaryKey}) {
#if(${primaryKeyType} == "String")
		if (StringUtils.isBlank(${primaryKey})) {
        	return null;
        }
#else
        if (${primaryKey} == null) {
        	return null;
        }
		#end

        ${upClassName} ${lowClassName} = ${lowClassName}Mapper.findBy${primaryKeyFirstSymbolUppercase}(${primaryKey});
        return ${lowClassName};
	}

	@Override
	public List<${upClassName}> list${upClassName}(${primaryKeyType}[] ${primaryKey}s) {
		if (ArrayUtils.isEmpty(${primaryKey}s)) {
			return Lists.newArrayList();
		}

		Map<String, Object> map = QueryMapperUtils.toQueryMap();
		map.put("${primaryKey}s", ${primaryKey}s);
		List<${upClassName}> ${lowClassName}s = ${lowClassName}Mapper.list${upClassName}(map);
        return ${lowClassName}s;
	}

	@Override
	public Map<${primaryKeyType}, ${upClassName}> map${upClassName}(${primaryKeyType}[] ${primaryKey}s) {
		List<${upClassName}> ${lowClassName}s = list${upClassName}(${primaryKey}s);
		if (CollectionUtil.isEmpty(${lowClassName}s)) {
			return Maps.newHashMap();
		}

		Map<${primaryKeyType}, ${upClassName}> ${lowClassName}Map = ListFieldConvertUtils
			.getObjectMap(${lowClassName}s, "${primaryKey}");
		return ${lowClassName}Map;
	}

	@Override
	public Paging<${upClassName}> find${upClassName}ByPage(${upClassName}VO ${lowClassName}VO, PagingRequest pagingRequest) {
		// 查询请求参数转换
        ListAdapter<${upClassName}VO> listAdapter = ListAdapterUtil.<${upClassName}VO>convert2ListAdapter(pagingRequest);
        Map<String, Object> queryMap = listAdapter.convert(${lowClassName}VO);

        // 分页查询数量
        Integer count = ${lowClassName}Mapper.list${upClassName}Count(queryMap);

        DefaultPaging<${upClassName}> paging = new DefaultPaging<${upClassName}>
                (pagingRequest.getPageNo(), pagingRequest.getPageSize(), count);
        if (count <= 0) {
            paging.setResult(new ArrayList<${upClassName}>(0));
            return paging;
        }

    	listAdapter.setPageNo(paging.getCurrentPageNo());
    	queryMap.putAll(listAdapter.convert(new ${upClassName}VO()));

		List<${upClassName}> ${lowClassName}s = ${lowClassName}Mapper.list${upClassName}(queryMap);
        if (CollectionUtil.isEmpty(${lowClassName}s)) {
            paging.setResult(new ArrayList<${upClassName}>(0));
            return paging;
        }

        paging.setResult(${lowClassName}s);
        return paging;
	}

}